
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qlkh.views;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import javax.swing.JLabel;
import javax.swing.JPanel;

import qlkh.utils.Utils;
import qlkh.utils.custombarchart.BarChartItems;
import qlkh.utils.custombarchart.BarChart_AWT;
import qlkh.utils.custombarchart.ChartItem;
import qlkh.utils.custombarchart.PieChart_AWT;

/**
 *
 * @author user
 */
public class ReportView extends javax.swing.JPanel {

    /**
     * Creates new form OutputInfoView
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        main = new javax.swing.JPanel();
        upPanel = new javax.swing.JPanel();
        tableParentPanel1 = new javax.swing.JPanel();
        tablePanel1 = new javax.swing.JPanel();
        cbbTable1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnTable1 = new javax.swing.JButton();
        tablePanel2 = new javax.swing.JPanel();
        downPanel = new javax.swing.JPanel();
        tableParentPanel3 = new javax.swing.JPanel();
        cbbTable3 = new javax.swing.JComboBox();
        tablePanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnTable3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 51, 0));

        main.setPreferredSize(new java.awt.Dimension(1000, 721));
        main.setLayout(new javax.swing.BoxLayout(main, javax.swing.BoxLayout.PAGE_AXIS));

        tablePanel1.setLayout(new java.awt.CardLayout());

        cbbTable1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbTable1ItemStateChanged(evt);
            }
        });

        jLabel1.setText("Biểu đồ doanh thu và chi phí");

        btnTable1.setText("Find");

        javax.swing.GroupLayout tableParentPanel1Layout = new javax.swing.GroupLayout(tableParentPanel1);
        tableParentPanel1.setLayout(tableParentPanel1Layout);
        tableParentPanel1Layout.setHorizontalGroup(
            tableParentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableParentPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(btnTable1)
                .addGap(29, 29, 29)
                .addComponent(cbbTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(tableParentPanel1Layout.createSequentialGroup()
                .addComponent(tablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tableParentPanel1Layout.setVerticalGroup(
            tableParentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableParentPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tableParentPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbTable1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnTable1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tablePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tablePanel2.setBackground(new java.awt.Color(51, 102, 0));
        tablePanel2.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout upPanelLayout = new javax.swing.GroupLayout(upPanel);
        upPanel.setLayout(upPanelLayout);
        upPanelLayout.setHorizontalGroup(
            upPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upPanelLayout.createSequentialGroup()
                .addComponent(tableParentPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(tablePanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
        );
        upPanelLayout.setVerticalGroup(
            upPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableParentPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, upPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tablePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        main.add(upPanel);

        cbbTable3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbTable3ItemStateChanged(evt);
            }
        });

        tablePanel3.setLayout(new java.awt.CardLayout());

        jLabel2.setText("Lãi suất");

        btnTable3.setText("Find");

        javax.swing.GroupLayout tableParentPanel3Layout = new javax.swing.GroupLayout(tableParentPanel3);
        tableParentPanel3.setLayout(tableParentPanel3Layout);
        tableParentPanel3Layout.setHorizontalGroup(
            tableParentPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableParentPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnTable3)
                .addGap(41, 41, 41)
                .addComponent(cbbTable3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addComponent(tablePanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        tableParentPanel3Layout.setVerticalGroup(
            tableParentPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableParentPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tableParentPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbTable3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnTable3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout downPanelLayout = new javax.swing.GroupLayout(downPanel);
        downPanel.setLayout(downPanelLayout);
        downPanelLayout.setHorizontalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addComponent(tableParentPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(481, Short.MAX_VALUE))
        );
        downPanelLayout.setVerticalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableParentPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        main.add(downPanel);

        jPanel1.add(main);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbbTable1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbTable1ItemStateChanged
        String cbb1Text = cbbTable1.getSelectedItem().toString();
        CardLayout layout = (CardLayout) tablePanel1.getLayout();
        if (isFirstTime == false) {
            if (cbb1Text.equals(cbbItem1[0])) {
                //  JPanel panel = createBarChartTable(getListItems(), cbb1Text, cbb1Text, cbb1Text);
                // tablePanel1.add(panel, cbbItem1[0]);
                //   layout.show(tablePanel1, cbbItem1[0]);
            } else if (cbb1Text.equals(cbbItem1[1])) {
                //  JPanel panel = createBarChartTable(getListItems(), cbb1Text, cbb1Text, cbb1Text);
                //  tablePanel1.add(panel, cbbItem1[1]);
                // layout.show(tablePanel1, cbbItem1[1]);
            } else if (cbb1Text.equals(cbbItem1[2])) {
                JPanel panel = createBarChartTable(getListItems1(), cbb1Text, cbb1Text, cbb1Text);
                tablePanel1.add(panel, cbbItem1[2]);
                layout.show(tablePanel1, cbbItem1[2]);
            }
        }
    }//GEN-LAST:event_cbbTable1ItemStateChanged

    private void cbbTable3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbTable3ItemStateChanged
        String cbb1Text = cbbTable3.getSelectedItem().toString();
        CardLayout layout = (CardLayout) tablePanel3.getLayout();
        if (isFirstTime == false) {
            if (cbb1Text.equals(cbbItem3[0])) {
                JPanel panel = createBarChartTable(getListItemsTable3(), cbb1Text, cbb1Text, cbb1Text);
                tablePanel3.add(panel, cbbItem3[0]);
                layout.show(tablePanel3, cbbItem3[0]);
            } else if (cbb1Text.equals(cbbItem3[1])) {
                JPanel panel = createBarChartTable(getListItemsTable31(), cbb1Text, cbb1Text, cbb1Text);
                tablePanel3.add(panel, cbbItem3[1]);
                layout.show(tablePanel3, cbbItem3[1]);
            }
        }
    }//GEN-LAST:event_cbbTable3ItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTable1;
    private javax.swing.JButton btnTable3;
    private javax.swing.JComboBox cbbTable1;
    private javax.swing.JComboBox cbbTable3;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel main;
    private javax.swing.JPanel tablePanel1;
    private javax.swing.JPanel tablePanel2;
    private javax.swing.JPanel tablePanel3;
    private javax.swing.JPanel tableParentPanel1;
    private javax.swing.JPanel tableParentPanel3;
    private javax.swing.JPanel upPanel;
    // End of variables declaration//GEN-END:variables
    ResourceBundle bundle;
    private static boolean isFirstTime = true;
    private static final String[] cbbItem1 = {"nearweek", "six_most_recent_month", "5_most_recent_year"};
    private static final String[] cbbItem3 = {"nearweek", "three_most_recent_month"};
    private static final int oneMilion = 1000000;
    
    public ReportView() {
        //  Locale local = Utils.getLocale();
        Locale local = Utils.getLocale();
        setResourceBundle(local);
        initComponents();
        for (String cbbItem11 : cbbItem1) {
            cbbTable1.addItem(bundle.getString(cbbItem11));
        }
        for (String cbbItem13 : cbbItem3) {
            cbbTable3.addItem(bundle.getString(cbbItem13));
        }
        
        JPanel panel = createPieChartTable(getListItemsPieChartTable2(), "Lượng hàng tồn kho theo danh mục");
        tablePanel2.add(panel);
        isFirstTime = false;
    }
    
    public void showView() {
        this.setVisible(true);
        
    }
    
    private void setResourceBundle(Locale locale) {
        //Set Resources Bundle theo local 
        bundle = ResourceBundle.getBundle("qlkh/utils/languages", locale);
    }
    
    public JPanel getContent() {
        return this;
    }
    
    public boolean isFirstTimeLoad() {
        return isFirstTime;
    }
    
    public void showTable1(List<BarChartItems> listItem, int action) {
        for (BarChartItems item : listItem) {
            item.getItem1().setRowKey(bundle.getString("ImportDetail"));
            item.getItem1().setValue(item.getItem1().getValue() / oneMilion);
            
            item.getItem2().setRowKey(bundle.getString("ExportDetail"));
            item.getItem2().setValue(item.getItem2().getValue() / oneMilion);
        }
        
        String tableTitle = bundle.getString("table1_title");
        String tableTitleHorizontal = "";
        switch (action) {           
            case 1:
                tableTitleHorizontal = bundle.getString("six_most_recent_month");
                break;
            case 2:
                tableTitleHorizontal = bundle.getString("5_most_recent_year");             
                break;
            default:
                tableTitleHorizontal = bundle.getString("nearweek");
                break;
        }
        String tableTitleVertical = bundle.getString("table1_title_vertical");
        JPanel panel = createBarChartTable(
                listItem, tableTitle, tableTitleHorizontal, tableTitleVertical);
      
        CardLayout layout = (CardLayout) tablePanel1.getLayout();
        tablePanel1.add(panel, tableTitle);
        layout.show(tablePanel1, tableTitle);
    }
    public void showTable2(List<ChartItem> listItem) {    
        String tableTitle = bundle.getString("table2_title");      
        JPanel panel = createPieChartTable(listItem, tableTitle);     
        CardLayout layout = (CardLayout) tablePanel2.getLayout();
        tablePanel2.add(panel, tableTitle);
        layout.show(tablePanel2, tableTitle);
    }
    public void showTable3(List<BarChartItems> listItem, int action) {
        for (BarChartItems item : listItem) {
            item.getItem1().setRowKey(bundle.getString("totalprofit"));
            item.getItem1().setValue(item.getItem1().getValue() );                    
        }
        
        String tableTitle = bundle.getString("table3_title");
        String tableTitleHorizontal = "";
        switch (action) {           
            case 1:
                tableTitleHorizontal = bundle.getString("three_most_recent_month");
                break;
            default:
                 tableTitleHorizontal = bundle.getString("nearweek");
                break;
        }
        String tableTitleVertical = bundle.getString("table3_title_vertical");
        JPanel panel = createBarChartTable(
                listItem, tableTitle, tableTitleHorizontal, tableTitleVertical);
      
        CardLayout layout = (CardLayout) tablePanel3.getLayout();
        tablePanel3.add(panel, tableTitle);
        layout.show(tablePanel3, tableTitle);
    }
    
    public List<BarChartItems> getListItems(List<BarChartItems> listItem) {
        List<BarChartItems> items = new ArrayList<>();
        for (BarChartItems item : listItem) {
            //  item.getItem1().setRowKey(bundle.getString());
        }
        return items;
    }
    
    public List<BarChartItems> getListItemsTable3() {
        List<BarChartItems> items = new ArrayList<>();
        for (int i = 1; i <= 7; i++) {
            ChartItem item1 = null;
            ChartItem item2 = new ChartItem("Profit detail", ((i + 0.5) * 1009009) / oneMilion);
            BarChartItems item = new BarChartItems(String.valueOf(i), item1, item2);
            items.add(item);
        }
        return items;
    }
    
    public List<BarChartItems> getListItemsTable31() {
        List<BarChartItems> items = new ArrayList<>();
        for (int i = 1; i <= 6; i++) {
            ChartItem item1 = null;
            ChartItem item2 = new ChartItem("Profit detail-v1", ((i + 0.5) * 1009009) / oneMilion);
            BarChartItems item = new BarChartItems(String.valueOf(i), item1, item2);
            items.add(item);
        }
        return items;
    }
    
    public List<ChartItem> getListItemsPieChartTable2() {
        List<ChartItem> items = new ArrayList<>();
        items.add(new ChartItem("Thuy san", 100));
        items.add(new ChartItem("Vi tinh", 300));
        items.add(new ChartItem(" cong ngiep", 240));
        return items;
    }
    
    public List<BarChartItems> getListItems1() {
        List<BarChartItems> items = new ArrayList<>();
        for (int i = 1; i <= 6; i++) {
            ChartItem item1 = new ChartItem("Import Detail-lv1", ((i + 0.5) * 2000000) / oneMilion);
            ChartItem item2 = new ChartItem("Export Detail-lv1", ((i + 0.5) * 1009009) / oneMilion);
            BarChartItems item = new BarChartItems(String.valueOf(i), item1, item2);
            items.add(item);
        }
        return items;
    }
    
    public List<BarChartItems> getListItems2() {
        List<BarChartItems> items = new ArrayList<>();
        for (int i = 1; i <= 6; i++) {
            ChartItem item1 = new ChartItem("Import Detail-lv2", ((i + 0.5) * 2000000) / oneMilion);
            ChartItem item2 = new ChartItem("Export Detail-lv2", ((i + 0.5) * 1009009) / oneMilion);
            BarChartItems item = new BarChartItems(String.valueOf(i), item1, item2);
            items.add(item);
        }
        return items;
    }
    
    public JPanel createBarChartTable(List<BarChartItems> items, String tittle, String horizontiltle, String verticalTitle) {
        String title1 = "Car Usage Statistics";
        BarChart_AWT chart = new BarChart_AWT("title",
                tittle, items, horizontiltle, verticalTitle);
        return chart.getContentPage();
    }
    
    public JPanel createPieChartTable(List<ChartItem> items, String tittle) {
        String title1 = "Car Usage Statistics";
        PieChart_AWT chart = new PieChart_AWT(tittle, items);
        return chart.getContentPage();
    }
    
    public int getComboBoxTable1Index() {
        return cbbTable1.getSelectedIndex();
    }
    
    public int getComboBoxTable3Index() {
        return cbbTable3.getSelectedIndex();
    }

   

    public void addBtnTable1Action(ActionListener listener) {
        btnTable1.addActionListener(listener);
    }
    public void addBtnTable3Action(ActionListener listener) {
        btnTable3.addActionListener(listener);
    }
    
}
